# pixels configurations
# pixels.var.dir is where the lock files created.
pixels.var.dir=/home/pixels/opt/pixels/var/
metric.bytesms.interval=51200
metric.reader.json.dir=/dev/shm/
metric.node.text.dir=/home/pixels/opt/node_exporter/text/
metric.reader.collect.prob=0.1
pixels.warehouse.path=hdfs://node01:9000/

# dbconfig
metadata.db.driver=com.mysql.jdbc.Driver
metadata.db.user=pixels
metadata.db.password=pixels27
metadata.db.url=jdbc:mysql://node01:3306/pixels_metadata?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull

# the dir containing core-site.xml and hdfs-site.xml
hdfs.config.dir=/opt/hadoop-2.7.3/etc/hadoop/

# metadada server
metadata.server.port=18888
metadata.server.host=node01

# split size
# Name of the inverted index to be cached in memory
# This index is used in getting split size from LAYOUT_SPLIT
inverted.index.name=inverted

# pixels-load
pixel.stride=10000
# 64M, 256M
row.group.size=256
block.size=2048
block.replication=1
block.padding=true
encoding=true
compression.block.size=1

# pixels reader
# row batch size for pixels record reader, default value is 10000
row.batch.size=10000

# Presto configuration (pixels)
presto.pixels.jdbc.url=jdbc:presto://node01:8080/pixels-presto/pixels
presto.orc.jdbc.url=jdbc:presto://node01:8080/hive/default
presto.user=test30g_pixels
presto.password=null
presto.ssl=false
presto.query.url=http://node01:8080/v1/query

# etcd configuration
# etcd.hosts=presto00,presto01,presto02,presto03,presto04
etcd.hosts=node01
etcd.port=2379

# pixels presto
# split size will be set to this fixed value if it is positive
fixed.split.size=-1
# true to enable just-in-time splitting in ordered path.
multi.split.for.ordered=true
# which scheduler to use for read requests.
# valid values: noop, sortmerge, ratelimited
read.request.scheduler=sortmerge
read.request.merge.gap=2097152
# rate limits only work for s3+ratelimited.
read.request.rate.limit.rps=6000
read.request.rate.limit.mbps=800
read.request.enable.retry=true
read.request.max.retry.num=3
s3.enable.async=true
s3.use.async.client=true
s3.connection.timeout.sec=60
s3.connection.acquisition.timeout.sec=60
s3.event.loop.group.threads=40
s3.max.request.concurrency=1000
s3.enable.request.diversion=true
# the percentile of concurrency of <1MB, 1-20MB, and >=10MB requests
s3.request.concurrency.assign=80:15:5
s3.max.pending.requests=100000

# the rate of free memory in jvm.
pixels.gc.threshold=0.3

# pixels cache
cache.location=/mnt/ramfs/pixels.cache
cache.size=102400000
index.location=/mnt/ramfs/pixels.index
index.size=102400000
storage.scheme=hdfs
cache.schema=pixels
cache.table=test_105
lease.ttl.seconds=30
# set to false if storage.scheme is S3
enable.absolute.balancer=false
cache.enabled=true
cache.read.direct=false
